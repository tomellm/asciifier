<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="557"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.18%)</title><rect x="0.0000%" y="309" width="0.1795%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.18%)</title><rect x="0.0000%" y="293" width="0.1795%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>simple`asciifier::Coverage::dist (139 samples, 24.96%)</title><rect x="0.1795%" y="229" width="24.9551%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="139"/><text x="0.4295%" y="239.50">simple`asciifier::Coverage::dist</text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.18%)</title><rect x="25.1346%" y="213" width="0.1795%" height="15" fill="rgb(248,212,6)" fg:x="140" fg:w="1"/><text x="25.3846%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.18%)</title><rect x="25.1346%" y="197" width="0.1795%" height="15" fill="rgb(208,68,35)" fg:x="140" fg:w="1"/><text x="25.3846%" y="207.50"></text></g><g><title>simple`&lt;image::buffer_::ImageBuffer&lt;image::color::Rgb&lt;u8&gt;,alloc::vec::Vec&lt;u8&gt;&gt; as core::convert::From&lt;image::dynimage::DynamicImage&gt;&gt;::from (1 samples, 0.18%)</title><rect x="25.3142%" y="213" width="0.1795%" height="15" fill="rgb(232,128,0)" fg:x="141" fg:w="1"/><text x="25.5642%" y="223.50"></text></g><g><title>simple`image::dynimage::DynamicImage::to_rgb8 (1 samples, 0.18%)</title><rect x="25.3142%" y="197" width="0.1795%" height="15" fill="rgb(207,160,47)" fg:x="141" fg:w="1"/><text x="25.5642%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.90%)</title><rect x="25.4937%" y="165" width="0.8977%" height="15" fill="rgb(228,23,34)" fg:x="142" fg:w="5"/><text x="25.7437%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.72%)</title><rect x="26.3914%" y="149" width="0.7181%" height="15" fill="rgb(218,30,26)" fg:x="147" fg:w="4"/><text x="26.6414%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.54%)</title><rect x="27.1095%" y="133" width="0.5386%" height="15" fill="rgb(220,122,19)" fg:x="151" fg:w="3"/><text x="27.3595%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (4 samples, 0.72%)</title><rect x="27.6481%" y="101" width="0.7181%" height="15" fill="rgb(250,228,42)" fg:x="154" fg:w="4"/><text x="27.8981%" y="111.50"></text></g><g><title>simple`crc32fast::Hasher::update (8 samples, 1.44%)</title><rect x="28.3662%" y="101" width="1.4363%" height="15" fill="rgb(240,193,28)" fg:x="158" fg:w="8"/><text x="28.6162%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.54%)</title><rect x="29.8025%" y="85" width="0.5386%" height="15" fill="rgb(216,20,37)" fg:x="166" fg:w="3"/><text x="30.0525%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.18%)</title><rect x="30.5206%" y="69" width="0.1795%" height="15" fill="rgb(206,188,39)" fg:x="170" fg:w="1"/><text x="30.7706%" y="79.50"></text></g><g><title>simple`fdeflate::compute_codes (1 samples, 0.18%)</title><rect x="30.7002%" y="69" width="0.1795%" height="15" fill="rgb(217,207,13)" fg:x="171" fg:w="1"/><text x="30.9502%" y="79.50"></text></g><g><title>simple`png::decoder::Reader&lt;R&gt;::next_raw_interlaced_row (131 samples, 23.52%)</title><rect x="27.6481%" y="133" width="23.5189%" height="15" fill="rgb(231,73,38)" fg:x="154" fg:w="131"/><text x="27.8981%" y="143.50">simple`png::decoder::Reader&lt;R&gt;::next_..</text></g><g><title>simple`png::decoder::ReadDecoder&lt;R&gt;::decode_next (131 samples, 23.52%)</title><rect x="27.6481%" y="117" width="23.5189%" height="15" fill="rgb(225,20,46)" fg:x="154" fg:w="131"/><text x="27.8981%" y="127.50">simple`png::decoder::ReadDecoder&lt;R&gt;::..</text></g><g><title>simple`png::decoder::stream::StreamingDecoder::update (119 samples, 21.36%)</title><rect x="29.8025%" y="101" width="21.3645%" height="15" fill="rgb(210,31,41)" fg:x="166" fg:w="119"/><text x="30.0525%" y="111.50">simple`png::decoder::stream::Strea..</text></g><g><title>simple`png::decoder::zlib::ZlibStream::decompress (116 samples, 20.83%)</title><rect x="30.3411%" y="85" width="20.8259%" height="15" fill="rgb(221,200,47)" fg:x="169" fg:w="116"/><text x="30.5911%" y="95.50">simple`png::decoder::zlib::ZlibSt..</text></g><g><title>simple`fdeflate::decompress::Decompressor::read (113 samples, 20.29%)</title><rect x="30.8797%" y="69" width="20.2873%" height="15" fill="rgb(226,26,5)" fg:x="172" fg:w="113"/><text x="31.1297%" y="79.50">simple`fdeflate::decompress::Dec..</text></g><g><title>simple`fdeflate::decompress::Decompressor::build_tables (8 samples, 1.44%)</title><rect x="49.7307%" y="53" width="1.4363%" height="15" fill="rgb(249,33,26)" fg:x="277" fg:w="8"/><text x="49.9807%" y="63.50"></text></g><g><title>simple`fdeflate::compute_codes (2 samples, 0.36%)</title><rect x="50.8079%" y="37" width="0.3591%" height="15" fill="rgb(235,183,28)" fg:x="283" fg:w="2"/><text x="51.0579%" y="47.50"></text></g><g><title>simple`image::dynimage::decoder_to_image (151 samples, 27.11%)</title><rect x="25.4937%" y="213" width="27.1095%" height="15" fill="rgb(221,5,38)" fg:x="142" fg:w="151"/><text x="25.7437%" y="223.50">simple`image::dynimage::decoder_to_image</text></g><g><title>simple`image::image::decoder_to_vec (151 samples, 27.11%)</title><rect x="25.4937%" y="197" width="27.1095%" height="15" fill="rgb(247,18,42)" fg:x="142" fg:w="151"/><text x="25.7437%" y="207.50">simple`image::image::decoder_to_vec</text></g><g><title>simple`&lt;image::codecs::png::PngDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image_boxed (151 samples, 27.11%)</title><rect x="25.4937%" y="181" width="27.1095%" height="15" fill="rgb(241,131,45)" fg:x="142" fg:w="151"/><text x="25.7437%" y="191.50">simple`&lt;image::codecs::png::PngDecoder&lt;R&gt; a..</text></g><g><title>simple`png::decoder::Reader&lt;R&gt;::next_frame (146 samples, 26.21%)</title><rect x="26.3914%" y="165" width="26.2118%" height="15" fill="rgb(249,31,29)" fg:x="147" fg:w="146"/><text x="26.6414%" y="175.50">simple`png::decoder::Reader&lt;R&gt;::next_frame</text></g><g><title>simple`png::decoder::Reader&lt;R&gt;::next_interlaced_row_impl (142 samples, 25.49%)</title><rect x="27.1095%" y="149" width="25.4937%" height="15" fill="rgb(225,111,53)" fg:x="151" fg:w="142"/><text x="27.3595%" y="159.50">simple`png::decoder::Reader&lt;R&gt;::next_inte..</text></g><g><title>simple`png::filter::unfilter (8 samples, 1.44%)</title><rect x="51.1670%" y="133" width="1.4363%" height="15" fill="rgb(238,160,17)" fg:x="285" fg:w="8"/><text x="51.4170%" y="143.50"></text></g><g><title>simple`asciifier::asciifier::Asciifier::load_image (154 samples, 27.65%)</title><rect x="25.1346%" y="229" width="27.6481%" height="15" fill="rgb(214,148,48)" fg:x="140" fg:w="154"/><text x="25.3846%" y="239.50">simple`asciifier::asciifier::Asciifier::load..</text></g><g><title>simple`image::image_reader::image_reader_type::ImageReader&lt;R&gt;::decode (1 samples, 0.18%)</title><rect x="52.6032%" y="213" width="0.1795%" height="15" fill="rgb(232,36,49)" fg:x="293" fg:w="1"/><text x="52.8532%" y="223.50"></text></g><g><title>simple`image::codecs::png::PngDecoder&lt;R&gt;::with_limits (1 samples, 0.18%)</title><rect x="52.6032%" y="197" width="0.1795%" height="15" fill="rgb(209,103,24)" fg:x="293" fg:w="1"/><text x="52.8532%" y="207.50"></text></g><g><title>simple`png::decoder::zlib::ZlibStream::new (1 samples, 0.18%)</title><rect x="52.6032%" y="181" width="0.1795%" height="15" fill="rgb(229,88,8)" fg:x="293" fg:w="1"/><text x="52.8532%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.36%)</title><rect x="59.2460%" y="213" width="0.3591%" height="15" fill="rgb(213,181,19)" fg:x="330" fg:w="2"/><text x="59.4960%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.36%)</title><rect x="59.2460%" y="197" width="0.3591%" height="15" fill="rgb(254,191,54)" fg:x="330" fg:w="2"/><text x="59.4960%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (6 samples, 1.08%)</title><rect x="59.7846%" y="133" width="1.0772%" height="15" fill="rgb(241,83,37)" fg:x="333" fg:w="6"/><text x="60.0346%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (6 samples, 1.08%)</title><rect x="61.0413%" y="117" width="1.0772%" height="15" fill="rgb(233,36,39)" fg:x="340" fg:w="6"/><text x="61.2913%" y="127.50"></text></g><g><title>simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 3.05%)</title><rect x="59.6050%" y="197" width="3.0521%" height="15" fill="rgb(226,3,54)" fg:x="332" fg:w="17"/><text x="59.8550%" y="207.50">sim..</text></g><g><title>simple`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 3.05%)</title><rect x="59.6050%" y="181" width="3.0521%" height="15" fill="rgb(245,192,40)" fg:x="332" fg:w="17"/><text x="59.8550%" y="191.50">sim..</text></g><g><title>simple`std::thread::Builder::spawn_unchecked (17 samples, 3.05%)</title><rect x="59.6050%" y="165" width="3.0521%" height="15" fill="rgb(238,167,29)" fg:x="332" fg:w="17"/><text x="59.8550%" y="175.50">sim..</text></g><g><title>simple`std::sys::pal::unix::thread::Thread::new (16 samples, 2.87%)</title><rect x="59.7846%" y="149" width="2.8725%" height="15" fill="rgb(232,182,51)" fg:x="333" fg:w="16"/><text x="60.0346%" y="159.50">si..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (10 samples, 1.80%)</title><rect x="60.8618%" y="133" width="1.7953%" height="15" fill="rgb(231,60,39)" fg:x="339" fg:w="10"/><text x="61.1118%" y="143.50">l..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (3 samples, 0.54%)</title><rect x="62.1185%" y="117" width="0.5386%" height="15" fill="rgb(208,69,12)" fg:x="346" fg:w="3"/><text x="62.3685%" y="127.50"></text></g><g><title>simple`asciifier::grouped_image::GroupedImage::new (19 samples, 3.41%)</title><rect x="59.6050%" y="213" width="3.4111%" height="15" fill="rgb(235,93,37)" fg:x="332" fg:w="19"/><text x="59.8550%" y="223.50">sim..</text></g><g><title>simple`alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.36%)</title><rect x="62.6571%" y="197" width="0.3591%" height="15" fill="rgb(213,116,39)" fg:x="349" fg:w="2"/><text x="62.9071%" y="207.50"></text></g><g><title>simple`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.36%)</title><rect x="62.6571%" y="181" width="0.3591%" height="15" fill="rgb(222,207,29)" fg:x="349" fg:w="2"/><text x="62.9071%" y="191.50"></text></g><g><title>simple`std::thread::JoinInner&lt;T&gt;::join (2 samples, 0.36%)</title><rect x="62.6571%" y="165" width="0.3591%" height="15" fill="rgb(206,96,30)" fg:x="349" fg:w="2"/><text x="62.9071%" y="175.50"></text></g><g><title>simple`std::sys::pal::unix::thread::Thread::join (2 samples, 0.36%)</title><rect x="62.6571%" y="149" width="0.3591%" height="15" fill="rgb(218,138,4)" fg:x="349" fg:w="2"/><text x="62.9071%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (2 samples, 0.36%)</title><rect x="62.6571%" y="133" width="0.3591%" height="15" fill="rgb(250,191,14)" fg:x="349" fg:w="2"/><text x="62.9071%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (2 samples, 0.36%)</title><rect x="62.6571%" y="117" width="0.3591%" height="15" fill="rgb(239,60,40)" fg:x="349" fg:w="2"/><text x="62.9071%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.36%)</title><rect x="62.6571%" y="101" width="0.3591%" height="15" fill="rgb(206,27,48)" fg:x="349" fg:w="2"/><text x="62.9071%" y="111.50"></text></g><g><title>simple`asciifier::asciifier::ImageBuilder::convert (74 samples, 13.29%)</title><rect x="52.7828%" y="229" width="13.2855%" height="15" fill="rgb(225,35,8)" fg:x="294" fg:w="74"/><text x="53.0328%" y="239.50">simple`asciifier::as..</text></g><g><title>simple`image::image::GenericImage::copy_from (17 samples, 3.05%)</title><rect x="63.0162%" y="213" width="3.0521%" height="15" fill="rgb(250,213,24)" fg:x="351" fg:w="17"/><text x="63.2662%" y="223.50">sim..</text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.18%)</title><rect x="66.0682%" y="197" width="0.1795%" height="15" fill="rgb(247,123,22)" fg:x="368" fg:w="1"/><text x="66.3182%" y="207.50"></text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_bits (12 samples, 2.15%)</title><rect x="67.1454%" y="149" width="2.1544%" height="15" fill="rgb(231,138,38)" fg:x="374" fg:w="12"/><text x="67.3954%" y="159.50">s..</text></g><g><title>simple`image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt;::encode_gray (113 samples, 20.29%)</title><rect x="66.4273%" y="165" width="20.2873%" height="15" fill="rgb(231,145,46)" fg:x="370" fg:w="113"/><text x="66.6773%" y="175.50">simple`image::codecs::jpeg::enco..</text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_block (97 samples, 17.41%)</title><rect x="69.2998%" y="149" width="17.4147%" height="15" fill="rgb(251,118,11)" fg:x="386" fg:w="97"/><text x="69.5498%" y="159.50">simple`image::codecs::jpeg:..</text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_bits (59 samples, 10.59%)</title><rect x="76.1221%" y="133" width="10.5925%" height="15" fill="rgb(217,147,25)" fg:x="424" fg:w="59"/><text x="76.3721%" y="143.50">simple`image::c..</text></g><g><title>simple`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (3 samples, 0.54%)</title><rect x="86.1759%" y="117" width="0.5386%" height="15" fill="rgb(247,81,37)" fg:x="480" fg:w="3"/><text x="86.4259%" y="127.50"></text></g><g><title>simple`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.54%)</title><rect x="86.1759%" y="101" width="0.5386%" height="15" fill="rgb(209,12,38)" fg:x="480" fg:w="3"/><text x="86.4259%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.54%)</title><rect x="86.1759%" y="85" width="0.5386%" height="15" fill="rgb(227,1,9)" fg:x="480" fg:w="3"/><text x="86.4259%" y="95.50"></text></g><g><title>dyld`start (487 samples, 87.43%)</title><rect x="0.0000%" y="325" width="87.4327%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="487"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>simple`main (486 samples, 87.25%)</title><rect x="0.1795%" y="309" width="87.2531%" height="15" fill="rgb(221,10,30)" fg:x="1" fg:w="486"/><text x="0.4295%" y="319.50">simple`main</text></g><g><title>simple`std::rt::lang_start_internal (486 samples, 87.25%)</title><rect x="0.1795%" y="293" width="87.2531%" height="15" fill="rgb(210,229,1)" fg:x="1" fg:w="486"/><text x="0.4295%" y="303.50">simple`std::rt::lang_start_internal</text></g><g><title>simple`std::rt::lang_start::_{{closure}} (486 samples, 87.25%)</title><rect x="0.1795%" y="277" width="87.2531%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="486"/><text x="0.4295%" y="287.50">simple`std::rt::lang_start::_{{closure}}</text></g><g><title>simple`std::sys::backtrace::__rust_begin_short_backtrace (486 samples, 87.25%)</title><rect x="0.1795%" y="261" width="87.2531%" height="15" fill="rgb(234,67,33)" fg:x="1" fg:w="486"/><text x="0.4295%" y="271.50">simple`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple`simple::main (486 samples, 87.25%)</title><rect x="0.1795%" y="245" width="87.2531%" height="15" fill="rgb(247,98,35)" fg:x="1" fg:w="486"/><text x="0.4295%" y="255.50">simple`simple::main</text></g><g><title>simple`image::buffer_::ImageBuffer&lt;P,Container&gt;::save (119 samples, 21.36%)</title><rect x="66.0682%" y="229" width="21.3645%" height="15" fill="rgb(247,138,52)" fg:x="368" fg:w="119"/><text x="66.3182%" y="239.50">simple`image::buffer_::ImageBuffer..</text></g><g><title>simple`image::image_reader::free_functions::save_buffer_impl (119 samples, 21.36%)</title><rect x="66.0682%" y="213" width="21.3645%" height="15" fill="rgb(213,79,30)" fg:x="368" fg:w="119"/><text x="66.3182%" y="223.50">simple`image::image_reader::free_f..</text></g><g><title>simple`image::image_reader::free_functions::save_buffer_with_format_impl (118 samples, 21.18%)</title><rect x="66.2478%" y="197" width="21.1849%" height="15" fill="rgb(246,177,23)" fg:x="369" fg:w="118"/><text x="66.4978%" y="207.50">simple`image::image_reader::free_..</text></g><g><title>simple`&lt;image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (117 samples, 21.01%)</title><rect x="66.4273%" y="181" width="21.0054%" height="15" fill="rgb(230,62,27)" fg:x="370" fg:w="117"/><text x="66.6773%" y="191.50">simple`&lt;image::codecs::jpeg::enco..</text></g><g><title>simple`image::codecs::jpeg::transform::fdct (4 samples, 0.72%)</title><rect x="86.7145%" y="165" width="0.7181%" height="15" fill="rgb(216,154,8)" fg:x="483" fg:w="4"/><text x="86.9645%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.18%)</title><rect x="87.4327%" y="325" width="0.1795%" height="15" fill="rgb(244,35,45)" fg:x="487" fg:w="1"/><text x="87.6827%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.18%)</title><rect x="87.6122%" y="325" width="0.1795%" height="15" fill="rgb(251,115,12)" fg:x="488" fg:w="1"/><text x="87.8622%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__thread_selfid (1 samples, 0.18%)</title><rect x="88.1508%" y="309" width="0.1795%" height="15" fill="rgb(240,54,50)" fg:x="491" fg:w="1"/><text x="88.4008%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (3 samples, 0.54%)</title><rect x="88.3303%" y="293" width="0.5386%" height="15" fill="rgb(233,84,52)" fg:x="492" fg:w="3"/><text x="88.5803%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.54%)</title><rect x="88.8689%" y="277" width="0.5386%" height="15" fill="rgb(207,117,47)" fg:x="495" fg:w="3"/><text x="89.1189%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (6 samples, 1.08%)</title><rect x="89.4075%" y="277" width="1.0772%" height="15" fill="rgb(249,43,39)" fg:x="498" fg:w="6"/><text x="89.6575%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (6 samples, 1.08%)</title><rect x="89.4075%" y="261" width="1.0772%" height="15" fill="rgb(209,38,44)" fg:x="498" fg:w="6"/><text x="89.6575%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (11 samples, 1.97%)</title><rect x="88.8689%" y="293" width="1.9749%" height="15" fill="rgb(236,212,23)" fg:x="495" fg:w="11"/><text x="89.1189%" y="303.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (2 samples, 0.36%)</title><rect x="90.4847%" y="277" width="0.3591%" height="15" fill="rgb(242,79,21)" fg:x="504" fg:w="2"/><text x="90.7347%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__sigaltstack (1 samples, 0.18%)</title><rect x="90.8438%" y="277" width="0.1795%" height="15" fill="rgb(211,96,35)" fg:x="506" fg:w="1"/><text x="91.0938%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.36%)</title><rect x="91.0233%" y="229" width="0.3591%" height="15" fill="rgb(253,215,40)" fg:x="507" fg:w="2"/><text x="91.2733%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (2 samples, 0.36%)</title><rect x="91.0233%" y="213" width="0.3591%" height="15" fill="rgb(211,81,21)" fg:x="507" fg:w="2"/><text x="91.2733%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (1 samples, 0.18%)</title><rect x="91.2029%" y="197" width="0.1795%" height="15" fill="rgb(208,190,38)" fg:x="508" fg:w="1"/><text x="91.4529%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.18%)</title><rect x="91.2029%" y="181" width="0.1795%" height="15" fill="rgb(235,213,38)" fg:x="508" fg:w="1"/><text x="91.4529%" y="191.50"></text></g><g><title>simple`core::ops::function::FnOnce::call_once{{vtable.shim}} (40 samples, 7.18%)</title><rect x="91.0233%" y="277" width="7.1813%" height="15" fill="rgb(237,122,38)" fg:x="507" fg:w="40"/><text x="91.2733%" y="287.50">simple`cor..</text></g><g><title>simple`std::sys::backtrace::__rust_begin_short_backtrace (40 samples, 7.18%)</title><rect x="91.0233%" y="261" width="7.1813%" height="15" fill="rgb(244,218,35)" fg:x="507" fg:w="40"/><text x="91.2733%" y="271.50">simple`std..</text></g><g><title>simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 7.18%)</title><rect x="91.0233%" y="245" width="7.1813%" height="15" fill="rgb(240,68,47)" fg:x="507" fg:w="40"/><text x="91.2733%" y="255.50">simple`&lt;al..</text></g><g><title>simple`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (38 samples, 6.82%)</title><rect x="91.3824%" y="229" width="6.8223%" height="15" fill="rgb(210,16,53)" fg:x="509" fg:w="38"/><text x="91.6324%" y="239.50">simple`&lt;c..</text></g><g><title>simple`asciifier::Coverage::new (22 samples, 3.95%)</title><rect x="94.2549%" y="213" width="3.9497%" height="15" fill="rgb(235,124,12)" fg:x="525" fg:w="22"/><text x="94.5049%" y="223.50">simp..</text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.36%)</title><rect x="98.2047%" y="261" width="0.3591%" height="15" fill="rgb(224,169,11)" fg:x="547" fg:w="2"/><text x="98.4547%" y="271.50"></text></g><g><title>dyld`dyld4::RuntimeState::_instantiateTLVs (2 samples, 0.36%)</title><rect x="98.2047%" y="245" width="0.3591%" height="15" fill="rgb(250,166,2)" fg:x="547" fg:w="2"/><text x="98.4547%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.36%)</title><rect x="98.2047%" y="229" width="0.3591%" height="15" fill="rgb(242,216,29)" fg:x="547" fg:w="2"/><text x="98.4547%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (65 samples, 11.67%)</title><rect x="87.7917%" y="325" width="11.6697%" height="15" fill="rgb(230,116,27)" fg:x="489" fg:w="65"/><text x="88.0417%" y="335.50">libsystem_pthread..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (62 samples, 11.13%)</title><rect x="88.3303%" y="309" width="11.1311%" height="15" fill="rgb(228,99,48)" fg:x="492" fg:w="62"/><text x="88.5803%" y="319.50">libsystem_pthrea..</text></g><g><title>simple`std::sys::pal::unix::thread::Thread::new::thread_start (48 samples, 8.62%)</title><rect x="90.8438%" y="293" width="8.6176%" height="15" fill="rgb(253,11,6)" fg:x="506" fg:w="48"/><text x="91.0938%" y="303.50">simple`std::..</text></g><g><title>simple`std::sys::pal::unix::stack_overflow::imp::make_handler (7 samples, 1.26%)</title><rect x="98.2047%" y="277" width="1.2567%" height="15" fill="rgb(247,143,39)" fg:x="547" fg:w="7"/><text x="98.4547%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (5 samples, 0.90%)</title><rect x="98.5637%" y="261" width="0.8977%" height="15" fill="rgb(236,97,10)" fg:x="549" fg:w="5"/><text x="98.8137%" y="271.50"></text></g><g><title>all (557 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="557"/><text x="0.2500%" y="351.50"></text></g><g><title>simple`image::dynimage::DynamicImage::to_rgb8 (3 samples, 0.54%)</title><rect x="99.4614%" y="325" width="0.5386%" height="15" fill="rgb(216,164,2)" fg:x="554" fg:w="3"/><text x="99.7114%" y="335.50"></text></g></svg></svg>