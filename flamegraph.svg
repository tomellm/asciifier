<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="1131"><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.18%)</title><rect x="0.0000%" y="181" width="0.1768%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.18%)</title><rect x="0.0000%" y="165" width="0.1768%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (2 samples, 0.18%)</title><rect x="0.0000%" y="149" width="0.1768%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.18%)</title><rect x="0.0000%" y="133" width="0.1768%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 1.68%)</title><rect x="0.1768%" y="181" width="1.6799%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="19"/><text x="0.4268%" y="191.50"></text></g><g><title>simple`asciifier::Coverage::dist (11 samples, 0.97%)</title><rect x="1.8568%" y="181" width="0.9726%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="11"/><text x="2.1068%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.09%)</title><rect x="2.8294%" y="101" width="0.0884%" height="15" fill="rgb(207,160,47)" fg:x="32" fg:w="1"/><text x="3.0794%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.09%)</title><rect x="2.8294%" y="85" width="0.0884%" height="15" fill="rgb(228,23,34)" fg:x="32" fg:w="1"/><text x="3.0794%" y="95.50"></text></g><g><title>simple`ab_glyph_rasterizer::raster::Rasterizer::for_each_pixel_2d (1 samples, 0.09%)</title><rect x="2.9178%" y="85" width="0.0884%" height="15" fill="rgb(218,30,26)" fg:x="33" fg:w="1"/><text x="3.1678%" y="95.50"></text></g><g><title>simple`ab_glyph::outlined::OutlinedGlyph::draw (2 samples, 0.18%)</title><rect x="2.9178%" y="101" width="0.1768%" height="15" fill="rgb(220,122,19)" fg:x="33" fg:w="2"/><text x="3.1678%" y="111.50"></text></g><g><title>simple`ab_glyph_rasterizer::raster::Rasterizer::tesselate_cubic (1 samples, 0.09%)</title><rect x="3.0062%" y="85" width="0.0884%" height="15" fill="rgb(250,228,42)" fg:x="34" fg:w="1"/><text x="3.2562%" y="95.50"></text></g><g><title>simple`ab_glyph_rasterizer::raster::Rasterizer::tesselate_cubic (1 samples, 0.09%)</title><rect x="3.0062%" y="69" width="0.0884%" height="15" fill="rgb(240,193,28)" fg:x="34" fg:w="1"/><text x="3.2562%" y="79.50"></text></g><g><title>simple`ab_glyph_rasterizer::raster::Rasterizer::draw_line_scalar (1 samples, 0.09%)</title><rect x="3.0062%" y="53" width="0.0884%" height="15" fill="rgb(216,20,37)" fg:x="34" fg:w="1"/><text x="3.2562%" y="63.50"></text></g><g><title>simple`asciifier::asciifier::FontBuilder::build (17 samples, 1.50%)</title><rect x="2.8294%" y="165" width="1.5031%" height="15" fill="rgb(206,188,39)" fg:x="32" fg:w="17"/><text x="3.0794%" y="175.50"></text></g><g><title>simple`asciifier::chars::Chars::new (17 samples, 1.50%)</title><rect x="2.8294%" y="149" width="1.5031%" height="15" fill="rgb(217,207,13)" fg:x="32" fg:w="17"/><text x="3.0794%" y="159.50"></text></g><g><title>simple`asciifier::chars::Chars::rasterize_chars (17 samples, 1.50%)</title><rect x="2.8294%" y="133" width="1.5031%" height="15" fill="rgb(231,73,38)" fg:x="32" fg:w="17"/><text x="3.0794%" y="143.50"></text></g><g><title>simple`asciifier::chars::char::RasterizedCharBuilder::rasterize (17 samples, 1.50%)</title><rect x="2.8294%" y="117" width="1.5031%" height="15" fill="rgb(225,20,46)" fg:x="32" fg:w="17"/><text x="3.0794%" y="127.50"></text></g><g><title>simple`asciifier::Coverage::new (14 samples, 1.24%)</title><rect x="3.0946%" y="101" width="1.2378%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="14"/><text x="3.3446%" y="111.50"></text></g><g><title>simple`asciifier::asciifier::Asciifier::font (18 samples, 1.59%)</title><rect x="2.8294%" y="181" width="1.5915%" height="15" fill="rgb(221,200,47)" fg:x="32" fg:w="18"/><text x="3.0794%" y="191.50"></text></g><g><title>simple`ttf_parser::Face::parse (1 samples, 0.09%)</title><rect x="4.3324%" y="165" width="0.0884%" height="15" fill="rgb(226,26,5)" fg:x="49" fg:w="1"/><text x="4.5824%" y="175.50"></text></g><g><title>simple`zune_jpeg::bitstream::BitStream::decode_mcu_block (1 samples, 0.09%)</title><rect x="4.4209%" y="117" width="0.0884%" height="15" fill="rgb(249,33,26)" fg:x="50" fg:w="1"/><text x="4.6709%" y="127.50"></text></g><g><title>simple`zune_jpeg::bitstream::BitStream::decode_mcu_block (33 samples, 2.92%)</title><rect x="5.0398%" y="101" width="2.9178%" height="15" fill="rgb(235,183,28)" fg:x="57" fg:w="33"/><text x="5.2898%" y="111.50">si..</text></g><g><title>simple`zune_jpeg::idct::neon::idct_neon (32 samples, 2.83%)</title><rect x="7.9576%" y="101" width="2.8294%" height="15" fill="rgb(221,5,38)" fg:x="90" fg:w="32"/><text x="8.2076%" y="111.50">si..</text></g><g><title>simple`zune_jpeg::mcu::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::post_process::_{{closure}} (21 samples, 1.86%)</title><rect x="10.7869%" y="85" width="1.8568%" height="15" fill="rgb(247,18,42)" fg:x="122" fg:w="21"/><text x="11.0369%" y="95.50">s..</text></g><g><title>simple`zune_jpeg::worker::color_convert (21 samples, 1.86%)</title><rect x="10.7869%" y="69" width="1.8568%" height="15" fill="rgb(241,131,45)" fg:x="122" fg:w="21"/><text x="11.0369%" y="79.50">s..</text></g><g><title>simple`zune_jpeg::worker::color_convert_ycbcr (21 samples, 1.86%)</title><rect x="10.7869%" y="53" width="1.8568%" height="15" fill="rgb(249,31,29)" fg:x="122" fg:w="21"/><text x="11.0369%" y="63.50">s..</text></g><g><title>simple`zune_jpeg::color_convert::scalar::ycbcr_to_rgb_inner_16_scalar (19 samples, 1.68%)</title><rect x="10.9637%" y="37" width="1.6799%" height="15" fill="rgb(225,111,53)" fg:x="124" fg:w="19"/><text x="11.2137%" y="47.50"></text></g><g><title>simple`zune_jpeg::upsampler::scalar::upsample_horizontal (1 samples, 0.09%)</title><rect x="12.6437%" y="69" width="0.0884%" height="15" fill="rgb(238,160,17)" fg:x="143" fg:w="1"/><text x="12.8937%" y="79.50"></text></g><g><title>simple`zune_jpeg::upsampler::scalar::upsample_horizontal (2 samples, 0.18%)</title><rect x="12.7321%" y="53" width="0.1768%" height="15" fill="rgb(214,148,48)" fg:x="144" fg:w="2"/><text x="12.9821%" y="63.50"></text></g><g><title>simple`asciifier::asciifier::Asciifier::load_image (98 samples, 8.66%)</title><rect x="4.4209%" y="181" width="8.6649%" height="15" fill="rgb(232,36,49)" fg:x="50" fg:w="98"/><text x="4.6709%" y="191.50">simple`ascii..</text></g><g><title>simple`image::dynimage::decoder_to_image (98 samples, 8.66%)</title><rect x="4.4209%" y="165" width="8.6649%" height="15" fill="rgb(209,103,24)" fg:x="50" fg:w="98"/><text x="4.6709%" y="175.50">simple`image..</text></g><g><title>simple`image::image::decoder_to_vec (98 samples, 8.66%)</title><rect x="4.4209%" y="149" width="8.6649%" height="15" fill="rgb(229,88,8)" fg:x="50" fg:w="98"/><text x="4.6709%" y="159.50">simple`image..</text></g><g><title>simple`&lt;image::codecs::jpeg::decoder::JpegDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image_boxed (98 samples, 8.66%)</title><rect x="4.4209%" y="133" width="8.6649%" height="15" fill="rgb(213,181,19)" fg:x="50" fg:w="98"/><text x="4.6709%" y="143.50">simple`&lt;imag..</text></g><g><title>simple`zune_jpeg::mcu::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::decode_mcu_ycbcr_baseline (97 samples, 8.58%)</title><rect x="4.5093%" y="117" width="8.5765%" height="15" fill="rgb(254,191,54)" fg:x="51" fg:w="97"/><text x="4.7593%" y="127.50">simple`zune_..</text></g><g><title>simple`zune_jpeg::mcu::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::post_process (26 samples, 2.30%)</title><rect x="10.7869%" y="101" width="2.2989%" height="15" fill="rgb(241,83,37)" fg:x="122" fg:w="26"/><text x="11.0369%" y="111.50">s..</text></g><g><title>simple`zune_jpeg::worker::upsample (5 samples, 0.44%)</title><rect x="12.6437%" y="85" width="0.4421%" height="15" fill="rgb(233,36,39)" fg:x="143" fg:w="5"/><text x="12.8937%" y="95.50"></text></g><g><title>simple`zune_jpeg::upsampler::scalar::upsample_hv (4 samples, 0.35%)</title><rect x="12.7321%" y="69" width="0.3537%" height="15" fill="rgb(226,3,54)" fg:x="144" fg:w="4"/><text x="12.9821%" y="79.50"></text></g><g><title>simple`zune_jpeg::upsampler::scalar::upsample_vertical (2 samples, 0.18%)</title><rect x="12.9089%" y="53" width="0.1768%" height="15" fill="rgb(245,192,40)" fg:x="146" fg:w="2"/><text x="13.1589%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (1 samples, 0.09%)</title><rect x="23.2538%" y="85" width="0.0884%" height="15" fill="rgb(238,167,29)" fg:x="263" fg:w="1"/><text x="23.5038%" y="95.50"></text></g><g><title>simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.18%)</title><rect x="23.2538%" y="149" width="0.1768%" height="15" fill="rgb(232,182,51)" fg:x="263" fg:w="2"/><text x="23.5038%" y="159.50"></text></g><g><title>simple`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.18%)</title><rect x="23.2538%" y="133" width="0.1768%" height="15" fill="rgb(231,60,39)" fg:x="263" fg:w="2"/><text x="23.5038%" y="143.50"></text></g><g><title>simple`std::thread::Builder::spawn_unchecked (2 samples, 0.18%)</title><rect x="23.2538%" y="117" width="0.1768%" height="15" fill="rgb(208,69,12)" fg:x="263" fg:w="2"/><text x="23.5038%" y="127.50"></text></g><g><title>simple`std::sys::pal::unix::thread::Thread::new (2 samples, 0.18%)</title><rect x="23.2538%" y="101" width="0.1768%" height="15" fill="rgb(235,93,37)" fg:x="263" fg:w="2"/><text x="23.5038%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (1 samples, 0.09%)</title><rect x="23.3422%" y="85" width="0.0884%" height="15" fill="rgb(213,116,39)" fg:x="264" fg:w="1"/><text x="23.5922%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.09%)</title><rect x="23.3422%" y="69" width="0.0884%" height="15" fill="rgb(222,207,29)" fg:x="264" fg:w="1"/><text x="23.5922%" y="79.50"></text></g><g><title>simple`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.18%)</title><rect x="23.4306%" y="149" width="0.1768%" height="15" fill="rgb(206,96,30)" fg:x="265" fg:w="2"/><text x="23.6806%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.18%)</title><rect x="23.4306%" y="133" width="0.1768%" height="15" fill="rgb(218,138,4)" fg:x="265" fg:w="2"/><text x="23.6806%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.18%)</title><rect x="23.4306%" y="117" width="0.1768%" height="15" fill="rgb(250,191,14)" fg:x="265" fg:w="2"/><text x="23.6806%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (2 samples, 0.18%)</title><rect x="23.4306%" y="101" width="0.1768%" height="15" fill="rgb(239,60,40)" fg:x="265" fg:w="2"/><text x="23.6806%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.18%)</title><rect x="23.4306%" y="85" width="0.1768%" height="15" fill="rgb(206,27,48)" fg:x="265" fg:w="2"/><text x="23.6806%" y="95.50"></text></g><g><title>simple`asciifier::asciifier::ImageBuilder::convert (120 samples, 10.61%)</title><rect x="13.0858%" y="181" width="10.6101%" height="15" fill="rgb(225,35,8)" fg:x="148" fg:w="120"/><text x="13.3358%" y="191.50">simple`asciifie..</text></g><g><title>simple`asciifier::grouped_image::GroupedImage::new (5 samples, 0.44%)</title><rect x="23.2538%" y="165" width="0.4421%" height="15" fill="rgb(250,213,24)" fg:x="263" fg:w="5"/><text x="23.5038%" y="175.50"></text></g><g><title>simple`alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.09%)</title><rect x="23.6074%" y="149" width="0.0884%" height="15" fill="rgb(247,123,22)" fg:x="267" fg:w="1"/><text x="23.8574%" y="159.50"></text></g><g><title>simple`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.09%)</title><rect x="23.6074%" y="133" width="0.0884%" height="15" fill="rgb(231,138,38)" fg:x="267" fg:w="1"/><text x="23.8574%" y="143.50"></text></g><g><title>simple`std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.09%)</title><rect x="23.6074%" y="117" width="0.0884%" height="15" fill="rgb(231,145,46)" fg:x="267" fg:w="1"/><text x="23.8574%" y="127.50"></text></g><g><title>simple`std::sys::pal::unix::thread::Thread::join (1 samples, 0.09%)</title><rect x="23.6074%" y="101" width="0.0884%" height="15" fill="rgb(251,118,11)" fg:x="267" fg:w="1"/><text x="23.8574%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (1 samples, 0.09%)</title><rect x="23.6074%" y="85" width="0.0884%" height="15" fill="rgb(217,147,25)" fg:x="267" fg:w="1"/><text x="23.8574%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (1 samples, 0.09%)</title><rect x="23.6074%" y="69" width="0.0884%" height="15" fill="rgb(247,81,37)" fg:x="267" fg:w="1"/><text x="23.8574%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.09%)</title><rect x="23.6074%" y="53" width="0.0884%" height="15" fill="rgb(209,12,38)" fg:x="267" fg:w="1"/><text x="23.8574%" y="63.50"></text></g><g><title>simple`core::ptr::drop_in_place&lt;asciifier::asciifier::ImageBuilder&gt; (2 samples, 0.18%)</title><rect x="23.6958%" y="181" width="0.1768%" height="15" fill="rgb(227,1,9)" fg:x="268" fg:w="2"/><text x="23.9458%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.18%)</title><rect x="23.6958%" y="165" width="0.1768%" height="15" fill="rgb(248,47,43)" fg:x="268" fg:w="2"/><text x="23.9458%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.18%)</title><rect x="23.6958%" y="149" width="0.1768%" height="15" fill="rgb(221,10,30)" fg:x="268" fg:w="2"/><text x="23.9458%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (2 samples, 0.18%)</title><rect x="23.6958%" y="133" width="0.1768%" height="15" fill="rgb(210,229,1)" fg:x="268" fg:w="2"/><text x="23.9458%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.18%)</title><rect x="23.6958%" y="117" width="0.1768%" height="15" fill="rgb(222,148,37)" fg:x="268" fg:w="2"/><text x="23.9458%" y="127.50"></text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_block (2 samples, 0.18%)</title><rect x="23.8727%" y="117" width="0.1768%" height="15" fill="rgb(234,67,33)" fg:x="270" fg:w="2"/><text x="24.1227%" y="127.50"></text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::huffman_encode (2 samples, 0.18%)</title><rect x="41.0256%" y="101" width="0.1768%" height="15" fill="rgb(247,98,35)" fg:x="464" fg:w="2"/><text x="41.2756%" y="111.50"></text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_bits (12 samples, 1.06%)</title><rect x="41.2025%" y="101" width="1.0610%" height="15" fill="rgb(247,138,52)" fg:x="466" fg:w="12"/><text x="41.4525%" y="111.50"></text></g><g><title>simple`image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt;::encode_rgb (334 samples, 29.53%)</title><rect x="24.0495%" y="117" width="29.5314%" height="15" fill="rgb(213,79,30)" fg:x="272" fg:w="334"/><text x="24.2995%" y="127.50">simple`image::codecs::jpeg::encoder::JpegEncoder..</text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_block (128 samples, 11.32%)</title><rect x="42.2635%" y="101" width="11.3174%" height="15" fill="rgb(246,177,23)" fg:x="478" fg:w="128"/><text x="42.5135%" y="111.50">simple`image::cod..</text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_bits (59 samples, 5.22%)</title><rect x="48.3643%" y="85" width="5.2166%" height="15" fill="rgb(230,62,27)" fg:x="547" fg:w="59"/><text x="48.6143%" y="95.50">simple..</text></g><g><title>simple`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (12 samples, 1.06%)</title><rect x="52.5199%" y="69" width="1.0610%" height="15" fill="rgb(216,154,8)" fg:x="594" fg:w="12"/><text x="52.7699%" y="79.50"></text></g><g><title>simple`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (12 samples, 1.06%)</title><rect x="52.5199%" y="53" width="1.0610%" height="15" fill="rgb(244,35,45)" fg:x="594" fg:w="12"/><text x="52.7699%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (12 samples, 1.06%)</title><rect x="52.5199%" y="37" width="1.0610%" height="15" fill="rgb(251,115,12)" fg:x="594" fg:w="12"/><text x="52.7699%" y="47.50"></text></g><g><title>simple`&lt;image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (408 samples, 36.07%)</title><rect x="23.8727%" y="133" width="36.0743%" height="15" fill="rgb(240,54,50)" fg:x="270" fg:w="408"/><text x="24.1227%" y="143.50">simple`&lt;image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt; as ima..</text></g><g><title>simple`image::codecs::jpeg::transform::fdct (72 samples, 6.37%)</title><rect x="53.5809%" y="117" width="6.3660%" height="15" fill="rgb(233,84,52)" fg:x="606" fg:w="72"/><text x="53.8309%" y="127.50">simple`i..</text></g><g><title>simple`std::rt::lang_start::_{{closure}} (680 samples, 60.12%)</title><rect x="0.0000%" y="229" width="60.1238%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="680"/><text x="0.2500%" y="239.50">simple`std::rt::lang_start::_{{closure}}</text></g><g><title>simple`std::sys::backtrace::__rust_begin_short_backtrace (680 samples, 60.12%)</title><rect x="0.0000%" y="213" width="60.1238%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="680"/><text x="0.2500%" y="223.50">simple`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple`simple::main (680 samples, 60.12%)</title><rect x="0.0000%" y="197" width="60.1238%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="680"/><text x="0.2500%" y="207.50">simple`simple::main</text></g><g><title>simple`image::buffer_::ImageBuffer&lt;P,Container&gt;::save (410 samples, 36.25%)</title><rect x="23.8727%" y="181" width="36.2511%" height="15" fill="rgb(236,212,23)" fg:x="270" fg:w="410"/><text x="24.1227%" y="191.50">simple`image::buffer_::ImageBuffer&lt;P,Container&gt;::save</text></g><g><title>simple`image::image_reader::free_functions::save_buffer_impl (410 samples, 36.25%)</title><rect x="23.8727%" y="165" width="36.2511%" height="15" fill="rgb(242,79,21)" fg:x="270" fg:w="410"/><text x="24.1227%" y="175.50">simple`image::image_reader::free_functions::save_buffer_impl</text></g><g><title>simple`image::image_reader::free_functions::save_buffer_with_format_impl (410 samples, 36.25%)</title><rect x="23.8727%" y="149" width="36.2511%" height="15" fill="rgb(211,96,35)" fg:x="270" fg:w="410"/><text x="24.1227%" y="159.50">simple`image::image_reader::free_functions::save_buffer_wit..</text></g><g><title>simple`std::fs::OpenOptions::_open (2 samples, 0.18%)</title><rect x="59.9469%" y="133" width="0.1768%" height="15" fill="rgb(253,215,40)" fg:x="678" fg:w="2"/><text x="60.1969%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.18%)</title><rect x="59.9469%" y="117" width="0.1768%" height="15" fill="rgb(211,81,21)" fg:x="678" fg:w="2"/><text x="60.1969%" y="127.50"></text></g><g><title>dyld`start (681 samples, 60.21%)</title><rect x="0.0000%" y="277" width="60.2122%" height="15" fill="rgb(208,190,38)" fg:x="0" fg:w="681"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>simple`main (681 samples, 60.21%)</title><rect x="0.0000%" y="261" width="60.2122%" height="15" fill="rgb(235,213,38)" fg:x="0" fg:w="681"/><text x="0.2500%" y="271.50">simple`main</text></g><g><title>simple`std::rt::lang_start_internal (681 samples, 60.21%)</title><rect x="0.0000%" y="245" width="60.2122%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="681"/><text x="0.2500%" y="255.50">simple`std::rt::lang_start_internal</text></g><g><title>simple`std::sys::sync::once::queue::Once::call (1 samples, 0.09%)</title><rect x="60.1238%" y="229" width="0.0884%" height="15" fill="rgb(244,218,35)" fg:x="680" fg:w="1"/><text x="60.3738%" y="239.50"></text></g><g><title>simple`core::ptr::drop_in_place&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt; (1 samples, 0.09%)</title><rect x="60.1238%" y="213" width="0.0884%" height="15" fill="rgb(240,68,47)" fg:x="680" fg:w="1"/><text x="60.3738%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.09%)</title><rect x="60.2122%" y="277" width="0.0884%" height="15" fill="rgb(210,16,53)" fg:x="681" fg:w="1"/><text x="60.4622%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.09%)</title><rect x="60.3006%" y="245" width="0.0884%" height="15" fill="rgb(235,124,12)" fg:x="682" fg:w="1"/><text x="60.5506%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.09%)</title><rect x="60.3006%" y="229" width="0.0884%" height="15" fill="rgb(224,169,11)" fg:x="682" fg:w="1"/><text x="60.5506%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.09%)</title><rect x="60.3890%" y="229" width="0.0884%" height="15" fill="rgb(250,166,2)" fg:x="683" fg:w="1"/><text x="60.6390%" y="239.50"></text></g><g><title>simple`&lt;image::buffer_::ImageBuffer&lt;P,Container&gt; as image::image::GenericImageView&gt;::get_pixel (5 samples, 0.44%)</title><rect x="60.5659%" y="165" width="0.4421%" height="15" fill="rgb(242,216,29)" fg:x="685" fg:w="5"/><text x="60.8159%" y="175.50"></text></g><g><title>simple`&lt;image::buffer_::ImageBuffer&lt;P,Container&gt; as image::image::GenericImageView&gt;::get_pixel (66 samples, 5.84%)</title><rect x="64.1910%" y="149" width="5.8355%" height="15" fill="rgb(230,116,27)" fg:x="726" fg:w="66"/><text x="64.4410%" y="159.50">simple`..</text></g><g><title>simple`asciifier::Coverage::new (113 samples, 9.99%)</title><rect x="70.0265%" y="149" width="9.9912%" height="15" fill="rgb(228,99,48)" fg:x="792" fg:w="113"/><text x="70.2765%" y="159.50">simple`asciifi..</text></g><g><title>simple`asciifier::asciifier::convert_to_gray (20 samples, 1.77%)</title><rect x="80.0177%" y="149" width="1.7683%" height="15" fill="rgb(253,11,6)" fg:x="905" fg:w="20"/><text x="80.2677%" y="159.50"></text></g><g><title>all (1,131 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="1131"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (449 samples, 39.70%)</title><rect x="60.3006%" y="277" width="39.6994%" height="15" fill="rgb(236,97,10)" fg:x="682" fg:w="449"/><text x="60.5506%" y="287.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (449 samples, 39.70%)</title><rect x="60.3006%" y="261" width="39.6994%" height="15" fill="rgb(233,208,19)" fg:x="682" fg:w="449"/><text x="60.5506%" y="271.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>simple`std::sys::pal::unix::thread::Thread::new::thread_start (448 samples, 39.61%)</title><rect x="60.3890%" y="245" width="39.6110%" height="15" fill="rgb(216,164,2)" fg:x="683" fg:w="448"/><text x="60.6390%" y="255.50">simple`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>simple`core::ops::function::FnOnce::call_once{{vtable.shim}} (447 samples, 39.52%)</title><rect x="60.4775%" y="229" width="39.5225%" height="15" fill="rgb(220,129,5)" fg:x="684" fg:w="447"/><text x="60.7275%" y="239.50">simple`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>simple`std::sys::backtrace::__rust_begin_short_backtrace (447 samples, 39.52%)</title><rect x="60.4775%" y="213" width="39.5225%" height="15" fill="rgb(242,17,10)" fg:x="684" fg:w="447"/><text x="60.7275%" y="223.50">simple`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (447 samples, 39.52%)</title><rect x="60.4775%" y="197" width="39.5225%" height="15" fill="rgb(242,107,0)" fg:x="684" fg:w="447"/><text x="60.7275%" y="207.50">simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFr..</text></g><g><title>simple`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (447 samples, 39.52%)</title><rect x="60.4775%" y="181" width="39.5225%" height="15" fill="rgb(251,28,31)" fg:x="684" fg:w="447"/><text x="60.7275%" y="191.50">simple`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::trait..</text></g><g><title>simple`asciifier::grouped_image::PixelGroup::new (441 samples, 38.99%)</title><rect x="61.0080%" y="165" width="38.9920%" height="15" fill="rgb(233,223,10)" fg:x="690" fg:w="441"/><text x="61.2580%" y="175.50">simple`asciifier::grouped_image::PixelGroup::new</text></g><g><title>simple`image::image::SubImage&lt;I&gt;::to_image (206 samples, 18.21%)</title><rect x="81.7860%" y="149" width="18.2140%" height="15" fill="rgb(215,21,27)" fg:x="925" fg:w="206"/><text x="82.0360%" y="159.50">simple`image::image::SubImag..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.35%)</title><rect x="99.6463%" y="133" width="0.3537%" height="15" fill="rgb(232,23,21)" fg:x="1127" fg:w="4"/><text x="99.8963%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.35%)</title><rect x="99.6463%" y="117" width="0.3537%" height="15" fill="rgb(244,5,23)" fg:x="1127" fg:w="4"/><text x="99.8963%" y="127.50"></text></g></svg></svg>