<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="757"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.13%)</title><rect x="0.0000%" y="277" width="0.1321%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.13%)</title><rect x="0.0000%" y="261" width="0.1321%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.13%)</title><rect x="0.1321%" y="197" width="0.1321%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3821%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.13%)</title><rect x="0.1321%" y="181" width="0.1321%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3821%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.13%)</title><rect x="0.2642%" y="197" width="0.1321%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.5142%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (2 samples, 0.26%)</title><rect x="2.7741%" y="101" width="0.2642%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="2"/><text x="3.0241%" y="111.50"></text></g><g><title>simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.53%)</title><rect x="2.7741%" y="165" width="0.5284%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="4"/><text x="3.0241%" y="175.50"></text></g><g><title>simple`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.53%)</title><rect x="2.7741%" y="149" width="0.5284%" height="15" fill="rgb(228,23,34)" fg:x="21" fg:w="4"/><text x="3.0241%" y="159.50"></text></g><g><title>simple`std::thread::Builder::spawn_unchecked (4 samples, 0.53%)</title><rect x="2.7741%" y="133" width="0.5284%" height="15" fill="rgb(218,30,26)" fg:x="21" fg:w="4"/><text x="3.0241%" y="143.50"></text></g><g><title>simple`std::sys::pal::unix::thread::Thread::new (4 samples, 0.53%)</title><rect x="2.7741%" y="117" width="0.5284%" height="15" fill="rgb(220,122,19)" fg:x="21" fg:w="4"/><text x="3.0241%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (2 samples, 0.26%)</title><rect x="3.0383%" y="101" width="0.2642%" height="15" fill="rgb(250,228,42)" fg:x="23" fg:w="2"/><text x="3.2883%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.13%)</title><rect x="3.1704%" y="85" width="0.1321%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="1"/><text x="3.4204%" y="95.50"></text></g><g><title>simple`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.26%)</title><rect x="3.3025%" y="165" width="0.2642%" height="15" fill="rgb(216,20,37)" fg:x="25" fg:w="2"/><text x="3.5525%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.26%)</title><rect x="3.3025%" y="149" width="0.2642%" height="15" fill="rgb(206,188,39)" fg:x="25" fg:w="2"/><text x="3.5525%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.26%)</title><rect x="3.3025%" y="133" width="0.2642%" height="15" fill="rgb(217,207,13)" fg:x="25" fg:w="2"/><text x="3.5525%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (2 samples, 0.26%)</title><rect x="3.3025%" y="117" width="0.2642%" height="15" fill="rgb(231,73,38)" fg:x="25" fg:w="2"/><text x="3.5525%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.26%)</title><rect x="3.3025%" y="101" width="0.2642%" height="15" fill="rgb(225,20,46)" fg:x="25" fg:w="2"/><text x="3.5525%" y="111.50"></text></g><g><title>simple`asciifier::ascii_image::GroupedImage::new (7 samples, 0.92%)</title><rect x="2.7741%" y="181" width="0.9247%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="7"/><text x="3.0241%" y="191.50"></text></g><g><title>simple`alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.13%)</title><rect x="3.5667%" y="165" width="0.1321%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="1"/><text x="3.8167%" y="175.50"></text></g><g><title>simple`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.13%)</title><rect x="3.5667%" y="149" width="0.1321%" height="15" fill="rgb(226,26,5)" fg:x="27" fg:w="1"/><text x="3.8167%" y="159.50"></text></g><g><title>simple`std::thread::JoinInner&lt;T&gt;::join (1 samples, 0.13%)</title><rect x="3.5667%" y="133" width="0.1321%" height="15" fill="rgb(249,33,26)" fg:x="27" fg:w="1"/><text x="3.8167%" y="143.50"></text></g><g><title>simple`std::sys::pal::unix::thread::Thread::join (1 samples, 0.13%)</title><rect x="3.5667%" y="117" width="0.1321%" height="15" fill="rgb(235,183,28)" fg:x="27" fg:w="1"/><text x="3.8167%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_join (1 samples, 0.13%)</title><rect x="3.5667%" y="101" width="0.1321%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="1"/><text x="3.8167%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (1 samples, 0.13%)</title><rect x="3.5667%" y="85" width="0.1321%" height="15" fill="rgb(247,18,42)" fg:x="27" fg:w="1"/><text x="3.8167%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.13%)</title><rect x="3.5667%" y="69" width="0.1321%" height="15" fill="rgb(241,131,45)" fg:x="27" fg:w="1"/><text x="3.8167%" y="79.50"></text></g><g><title>simple`asciifier::asciifier::ImageBuilder::convert (69 samples, 9.11%)</title><rect x="0.3963%" y="197" width="9.1149%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="69"/><text x="0.6463%" y="207.50">simple`asciif..</text></g><g><title>simple`image::image::GenericImage::copy_from (44 samples, 5.81%)</title><rect x="3.6988%" y="181" width="5.8124%" height="15" fill="rgb(225,111,53)" fg:x="28" fg:w="44"/><text x="3.9488%" y="191.50">simple`..</text></g><g><title>simple`core::ptr::drop_in_place&lt;asciifier::asciifier::ImageBuilder&gt; (2 samples, 0.26%)</title><rect x="9.5112%" y="197" width="0.2642%" height="15" fill="rgb(238,160,17)" fg:x="72" fg:w="2"/><text x="9.7612%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.26%)</title><rect x="9.5112%" y="181" width="0.2642%" height="15" fill="rgb(214,148,48)" fg:x="72" fg:w="2"/><text x="9.7612%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (2 samples, 0.26%)</title><rect x="9.5112%" y="165" width="0.2642%" height="15" fill="rgb(232,36,49)" fg:x="72" fg:w="2"/><text x="9.7612%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (2 samples, 0.26%)</title><rect x="9.5112%" y="149" width="0.2642%" height="15" fill="rgb(209,103,24)" fg:x="72" fg:w="2"/><text x="9.7612%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.26%)</title><rect x="9.5112%" y="133" width="0.2642%" height="15" fill="rgb(229,88,8)" fg:x="72" fg:w="2"/><text x="9.7612%" y="143.50"></text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_block (1 samples, 0.13%)</title><rect x="9.7754%" y="133" width="0.1321%" height="15" fill="rgb(213,181,19)" fg:x="74" fg:w="1"/><text x="10.0254%" y="143.50"></text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_bits (24 samples, 3.17%)</title><rect x="15.8520%" y="117" width="3.1704%" height="15" fill="rgb(254,191,54)" fg:x="120" fg:w="24"/><text x="16.1020%" y="127.50">sim..</text></g><g><title>simple`image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt;::encode_gray (225 samples, 29.72%)</title><rect x="9.9075%" y="133" width="29.7226%" height="15" fill="rgb(241,83,37)" fg:x="75" fg:w="225"/><text x="10.1575%" y="143.50">simple`image::codecs::jpeg::encoder::JpegEncoder..</text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_block (156 samples, 20.61%)</title><rect x="19.0225%" y="117" width="20.6077%" height="15" fill="rgb(233,36,39)" fg:x="144" fg:w="156"/><text x="19.2725%" y="127.50">simple`image::codecs::jpeg::enco..</text></g><g><title>simple`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_bits (88 samples, 11.62%)</title><rect x="28.0053%" y="101" width="11.6248%" height="15" fill="rgb(226,3,54)" fg:x="212" fg:w="88"/><text x="28.2553%" y="111.50">simple`image::cod..</text></g><g><title>simple`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2 samples, 0.26%)</title><rect x="39.3659%" y="85" width="0.2642%" height="15" fill="rgb(245,192,40)" fg:x="298" fg:w="2"/><text x="39.6159%" y="95.50"></text></g><g><title>simple`std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.26%)</title><rect x="39.3659%" y="69" width="0.2642%" height="15" fill="rgb(238,167,29)" fg:x="298" fg:w="2"/><text x="39.6159%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.26%)</title><rect x="39.3659%" y="53" width="0.2642%" height="15" fill="rgb(232,182,51)" fg:x="298" fg:w="2"/><text x="39.6159%" y="63.50"></text></g><g><title>simple`&lt;image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (241 samples, 31.84%)</title><rect x="9.7754%" y="149" width="31.8362%" height="15" fill="rgb(231,60,39)" fg:x="74" fg:w="241"/><text x="10.0254%" y="159.50">simple`&lt;image::codecs::jpeg::encoder::JpegEncoder&lt;W..</text></g><g><title>simple`image::codecs::jpeg::transform::fdct (15 samples, 1.98%)</title><rect x="39.6301%" y="133" width="1.9815%" height="15" fill="rgb(208,69,12)" fg:x="300" fg:w="15"/><text x="39.8801%" y="143.50">s..</text></g><g><title>simple`std::fs::OpenOptions::_open (1 samples, 0.13%)</title><rect x="41.6116%" y="149" width="0.1321%" height="15" fill="rgb(235,93,37)" fg:x="315" fg:w="1"/><text x="41.8616%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.13%)</title><rect x="41.6116%" y="133" width="0.1321%" height="15" fill="rgb(213,116,39)" fg:x="315" fg:w="1"/><text x="41.8616%" y="143.50"></text></g><g><title>simple`image::buffer_::ImageBuffer&lt;P,Container&gt;::save (243 samples, 32.10%)</title><rect x="9.7754%" y="197" width="32.1004%" height="15" fill="rgb(222,207,29)" fg:x="74" fg:w="243"/><text x="10.0254%" y="207.50">simple`image::buffer_::ImageBuffer&lt;P,Container&gt;::save</text></g><g><title>simple`image::image_reader::free_functions::save_buffer_impl (243 samples, 32.10%)</title><rect x="9.7754%" y="181" width="32.1004%" height="15" fill="rgb(206,96,30)" fg:x="74" fg:w="243"/><text x="10.0254%" y="191.50">simple`image::image_reader::free_functions::save_buf..</text></g><g><title>simple`image::image_reader::free_functions::save_buffer_with_format_impl (243 samples, 32.10%)</title><rect x="9.7754%" y="165" width="32.1004%" height="15" fill="rgb(218,138,4)" fg:x="74" fg:w="243"/><text x="10.0254%" y="175.50">simple`image::image_reader::free_functions::save_buf..</text></g><g><title>simple`std::io::impls::_&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.13%)</title><rect x="41.7437%" y="149" width="0.1321%" height="15" fill="rgb(250,191,14)" fg:x="316" fg:w="1"/><text x="41.9937%" y="159.50"></text></g><g><title>simple`zune_jpeg::idct::neon::idct_neon (1 samples, 0.13%)</title><rect x="41.8758%" y="149" width="0.1321%" height="15" fill="rgb(239,60,40)" fg:x="317" fg:w="1"/><text x="42.1258%" y="159.50"></text></g><g><title>simple`zune_jpeg::bitstream::BitStream::decode_mcu_block (39 samples, 5.15%)</title><rect x="42.8005%" y="133" width="5.1519%" height="15" fill="rgb(206,27,48)" fg:x="324" fg:w="39"/><text x="43.0505%" y="143.50">simple..</text></g><g><title>simple`zune_jpeg::idct::neon::idct_neon (31 samples, 4.10%)</title><rect x="47.9524%" y="133" width="4.0951%" height="15" fill="rgb(225,35,8)" fg:x="363" fg:w="31"/><text x="48.2024%" y="143.50">simp..</text></g><g><title>simple`zune_jpeg::mcu::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::post_process::_{{closure}} (24 samples, 3.17%)</title><rect x="52.0476%" y="117" width="3.1704%" height="15" fill="rgb(250,213,24)" fg:x="394" fg:w="24"/><text x="52.2976%" y="127.50">sim..</text></g><g><title>simple`zune_jpeg::worker::color_convert (24 samples, 3.17%)</title><rect x="52.0476%" y="101" width="3.1704%" height="15" fill="rgb(247,123,22)" fg:x="394" fg:w="24"/><text x="52.2976%" y="111.50">sim..</text></g><g><title>simple`zune_jpeg::worker::color_convert_ycbcr (24 samples, 3.17%)</title><rect x="52.0476%" y="85" width="3.1704%" height="15" fill="rgb(231,138,38)" fg:x="394" fg:w="24"/><text x="52.2976%" y="95.50">sim..</text></g><g><title>simple`zune_jpeg::color_convert::scalar::ycbcr_to_rgb_inner_16_scalar (21 samples, 2.77%)</title><rect x="52.4439%" y="69" width="2.7741%" height="15" fill="rgb(231,145,46)" fg:x="397" fg:w="21"/><text x="52.6939%" y="79.50">si..</text></g><g><title>simple`zune_jpeg::upsampler::scalar::upsample_horizontal (3 samples, 0.40%)</title><rect x="55.2180%" y="101" width="0.3963%" height="15" fill="rgb(251,118,11)" fg:x="418" fg:w="3"/><text x="55.4680%" y="111.50"></text></g><g><title>simple`zune_jpeg::upsampler::scalar::upsample_horizontal (4 samples, 0.53%)</title><rect x="55.6143%" y="85" width="0.5284%" height="15" fill="rgb(217,147,25)" fg:x="421" fg:w="4"/><text x="55.8643%" y="95.50"></text></g><g><title>simple`image::dynimage::decoder_to_image (110 samples, 14.53%)</title><rect x="41.8758%" y="197" width="14.5310%" height="15" fill="rgb(247,81,37)" fg:x="317" fg:w="110"/><text x="42.1258%" y="207.50">simple`image::dynimage..</text></g><g><title>simple`image::image::decoder_to_vec (110 samples, 14.53%)</title><rect x="41.8758%" y="181" width="14.5310%" height="15" fill="rgb(209,12,38)" fg:x="317" fg:w="110"/><text x="42.1258%" y="191.50">simple`image::image::d..</text></g><g><title>simple`&lt;image::codecs::jpeg::decoder::JpegDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image_boxed (110 samples, 14.53%)</title><rect x="41.8758%" y="165" width="14.5310%" height="15" fill="rgb(227,1,9)" fg:x="317" fg:w="110"/><text x="42.1258%" y="175.50">simple`&lt;image::codecs:..</text></g><g><title>simple`zune_jpeg::mcu::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::decode_mcu_ycbcr_baseline (109 samples, 14.40%)</title><rect x="42.0079%" y="149" width="14.3989%" height="15" fill="rgb(248,47,43)" fg:x="318" fg:w="109"/><text x="42.2579%" y="159.50">simple`zune_jpeg::mcu:..</text></g><g><title>simple`zune_jpeg::mcu::_&lt;impl zune_jpeg::decoder::JpegDecoder&lt;T&gt;&gt;::post_process (33 samples, 4.36%)</title><rect x="52.0476%" y="133" width="4.3593%" height="15" fill="rgb(221,10,30)" fg:x="394" fg:w="33"/><text x="52.2976%" y="143.50">simpl..</text></g><g><title>simple`zune_jpeg::worker::upsample (9 samples, 1.19%)</title><rect x="55.2180%" y="117" width="1.1889%" height="15" fill="rgb(210,229,1)" fg:x="418" fg:w="9"/><text x="55.4680%" y="127.50"></text></g><g><title>simple`zune_jpeg::upsampler::scalar::upsample_hv (6 samples, 0.79%)</title><rect x="55.6143%" y="101" width="0.7926%" height="15" fill="rgb(222,148,37)" fg:x="421" fg:w="6"/><text x="55.8643%" y="111.50"></text></g><g><title>simple`zune_jpeg::upsampler::scalar::upsample_vertical (2 samples, 0.26%)</title><rect x="56.1427%" y="85" width="0.2642%" height="15" fill="rgb(234,67,33)" fg:x="425" fg:w="2"/><text x="56.3927%" y="95.50"></text></g><g><title>simple`&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (1 samples, 0.13%)</title><rect x="56.4069%" y="165" width="0.1321%" height="15" fill="rgb(247,98,35)" fg:x="427" fg:w="1"/><text x="56.6569%" y="175.50"></text></g><g><title>simple`&lt;std::fs::File as std::io::Read&gt;::read_to_end (1 samples, 0.13%)</title><rect x="56.4069%" y="149" width="0.1321%" height="15" fill="rgb(247,138,52)" fg:x="427" fg:w="1"/><text x="56.6569%" y="159.50"></text></g><g><title>simple`&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_end (1 samples, 0.13%)</title><rect x="56.4069%" y="133" width="0.1321%" height="15" fill="rgb(213,79,30)" fg:x="427" fg:w="1"/><text x="56.6569%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.13%)</title><rect x="56.4069%" y="117" width="0.1321%" height="15" fill="rgb(246,177,23)" fg:x="427" fg:w="1"/><text x="56.6569%" y="127.50"></text></g><g><title>dyld`start (429 samples, 56.67%)</title><rect x="0.0000%" y="293" width="56.6711%" height="15" fill="rgb(230,62,27)" fg:x="0" fg:w="429"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>simple`main (428 samples, 56.54%)</title><rect x="0.1321%" y="277" width="56.5390%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="428"/><text x="0.3821%" y="287.50">simple`main</text></g><g><title>simple`std::rt::lang_start_internal (428 samples, 56.54%)</title><rect x="0.1321%" y="261" width="56.5390%" height="15" fill="rgb(244,35,45)" fg:x="1" fg:w="428"/><text x="0.3821%" y="271.50">simple`std::rt::lang_start_internal</text></g><g><title>simple`std::rt::lang_start::_{{closure}} (428 samples, 56.54%)</title><rect x="0.1321%" y="245" width="56.5390%" height="15" fill="rgb(251,115,12)" fg:x="1" fg:w="428"/><text x="0.3821%" y="255.50">simple`std::rt::lang_start::_{{closure}}</text></g><g><title>simple`std::sys::backtrace::__rust_begin_short_backtrace (428 samples, 56.54%)</title><rect x="0.1321%" y="229" width="56.5390%" height="15" fill="rgb(240,54,50)" fg:x="1" fg:w="428"/><text x="0.3821%" y="239.50">simple`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple`simple::main (428 samples, 56.54%)</title><rect x="0.1321%" y="213" width="56.5390%" height="15" fill="rgb(233,84,52)" fg:x="1" fg:w="428"/><text x="0.3821%" y="223.50">simple`simple::main</text></g><g><title>simple`image::image_reader::image_reader_type::ImageReader&lt;R&gt;::decode (2 samples, 0.26%)</title><rect x="56.4069%" y="197" width="0.2642%" height="15" fill="rgb(207,117,47)" fg:x="427" fg:w="2"/><text x="56.6569%" y="207.50"></text></g><g><title>simple`image::codecs::jpeg::decoder::JpegDecoder&lt;R&gt;::new (2 samples, 0.26%)</title><rect x="56.4069%" y="181" width="0.2642%" height="15" fill="rgb(249,43,39)" fg:x="427" fg:w="2"/><text x="56.6569%" y="191.50"></text></g><g><title>simple`zune_jpeg::decoder::JpegDecoder&lt;T&gt;::decode_headers_internal (1 samples, 0.13%)</title><rect x="56.5390%" y="165" width="0.1321%" height="15" fill="rgb(209,38,44)" fg:x="428" fg:w="1"/><text x="56.7890%" y="175.50"></text></g><g><title>simple`zune_jpeg::decoder::JpegDecoder&lt;T&gt;::parse_marker_inner (1 samples, 0.13%)</title><rect x="56.5390%" y="149" width="0.1321%" height="15" fill="rgb(236,212,23)" fg:x="428" fg:w="1"/><text x="56.7890%" y="159.50"></text></g><g><title>simple`zune_jpeg::headers::parse_huffman (1 samples, 0.13%)</title><rect x="56.5390%" y="133" width="0.1321%" height="15" fill="rgb(242,79,21)" fg:x="428" fg:w="1"/><text x="56.7890%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (1 samples, 0.13%)</title><rect x="56.5390%" y="117" width="0.1321%" height="15" fill="rgb(211,96,35)" fg:x="428" fg:w="1"/><text x="56.7890%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.13%)</title><rect x="56.6711%" y="293" width="0.1321%" height="15" fill="rgb(253,215,40)" fg:x="429" fg:w="1"/><text x="56.9211%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.13%)</title><rect x="56.8032%" y="293" width="0.1321%" height="15" fill="rgb(211,81,21)" fg:x="430" fg:w="1"/><text x="57.0532%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__thread_selfid (1 samples, 0.13%)</title><rect x="57.3316%" y="277" width="0.1321%" height="15" fill="rgb(208,190,38)" fg:x="434" fg:w="1"/><text x="57.5816%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.13%)</title><rect x="57.4637%" y="261" width="0.1321%" height="15" fill="rgb(235,213,38)" fg:x="435" fg:w="1"/><text x="57.7137%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.13%)</title><rect x="57.5958%" y="261" width="0.1321%" height="15" fill="rgb(237,122,38)" fg:x="436" fg:w="1"/><text x="57.8458%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (1 samples, 0.13%)</title><rect x="57.5958%" y="245" width="0.1321%" height="15" fill="rgb(244,218,35)" fg:x="436" fg:w="1"/><text x="57.8458%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (1 samples, 0.13%)</title><rect x="57.5958%" y="229" width="0.1321%" height="15" fill="rgb(240,68,47)" fg:x="436" fg:w="1"/><text x="57.8458%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.13%)</title><rect x="65.1255%" y="181" width="0.1321%" height="15" fill="rgb(210,16,53)" fg:x="493" fg:w="1"/><text x="65.3755%" y="191.50"></text></g><g><title>simple`&lt;image::image::Pixels&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (184 samples, 24.31%)</title><rect x="70.6737%" y="165" width="24.3065%" height="15" fill="rgb(235,124,12)" fg:x="535" fg:w="184"/><text x="70.9237%" y="175.50">simple`&lt;image::image::Pixels&lt;I&gt; as core..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.40%)</title><rect x="96.1691%" y="101" width="0.3963%" height="15" fill="rgb(224,169,11)" fg:x="728" fg:w="3"/><text x="96.4191%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.40%)</title><rect x="96.5654%" y="101" width="0.3963%" height="15" fill="rgb(250,166,2)" fg:x="731" fg:w="3"/><text x="96.8154%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.53%)</title><rect x="97.0938%" y="85" width="0.5284%" height="15" fill="rgb(242,216,29)" fg:x="735" fg:w="4"/><text x="97.3438%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.79%)</title><rect x="96.9617%" y="101" width="0.7926%" height="15" fill="rgb(230,116,27)" fg:x="734" fg:w="6"/><text x="97.2117%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="97.6222%" y="85" width="0.1321%" height="15" fill="rgb(228,99,48)" fg:x="739" fg:w="1"/><text x="97.8722%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="97.6222%" y="69" width="0.1321%" height="15" fill="rgb(253,11,6)" fg:x="739" fg:w="1"/><text x="97.8722%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.13%)</title><rect x="97.6222%" y="53" width="0.1321%" height="15" fill="rgb(247,143,39)" fg:x="739" fg:w="1"/><text x="97.8722%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.13%)</title><rect x="97.7543%" y="85" width="0.1321%" height="15" fill="rgb(236,97,10)" fg:x="740" fg:w="1"/><text x="98.0043%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.13%)</title><rect x="97.7543%" y="69" width="0.1321%" height="15" fill="rgb(233,208,19)" fg:x="740" fg:w="1"/><text x="98.0043%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages_plat (2 samples, 0.26%)</title><rect x="97.8864%" y="53" width="0.2642%" height="15" fill="rgb(216,164,2)" fg:x="741" fg:w="2"/><text x="98.1364%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (2 samples, 0.26%)</title><rect x="97.8864%" y="37" width="0.2642%" height="15" fill="rgb(220,129,5)" fg:x="741" fg:w="2"/><text x="98.1364%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.53%)</title><rect x="97.7543%" y="101" width="0.5284%" height="15" fill="rgb(242,17,10)" fg:x="740" fg:w="4"/><text x="98.0043%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.40%)</title><rect x="97.8864%" y="85" width="0.3963%" height="15" fill="rgb(242,107,0)" fg:x="741" fg:w="3"/><text x="98.1364%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.40%)</title><rect x="97.8864%" y="69" width="0.3963%" height="15" fill="rgb(251,28,31)" fg:x="741" fg:w="3"/><text x="98.1364%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.13%)</title><rect x="98.1506%" y="53" width="0.1321%" height="15" fill="rgb(233,223,10)" fg:x="743" fg:w="1"/><text x="98.4006%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (23 samples, 3.04%)</title><rect x="95.7728%" y="117" width="3.0383%" height="15" fill="rgb(215,21,27)" fg:x="725" fg:w="23"/><text x="96.0228%" y="127.50">lib..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.53%)</title><rect x="98.2827%" y="101" width="0.5284%" height="15" fill="rgb(232,23,21)" fg:x="744" fg:w="4"/><text x="98.5327%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.13%)</title><rect x="98.8111%" y="117" width="0.1321%" height="15" fill="rgb(244,5,23)" fg:x="748" fg:w="1"/><text x="99.0611%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (30 samples, 3.96%)</title><rect x="95.1123%" y="133" width="3.9630%" height="15" fill="rgb(226,81,46)" fg:x="720" fg:w="30"/><text x="95.3623%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.13%)</title><rect x="98.9432%" y="117" width="0.1321%" height="15" fill="rgb(247,70,30)" fg:x="749" fg:w="1"/><text x="99.1932%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.13%)</title><rect x="98.9432%" y="101" width="0.1321%" height="15" fill="rgb(212,68,19)" fg:x="749" fg:w="1"/><text x="99.1932%" y="111.50"></text></g><g><title>simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (259 samples, 34.21%)</title><rect x="65.2576%" y="181" width="34.2140%" height="15" fill="rgb(240,187,13)" fg:x="494" fg:w="259"/><text x="65.5076%" y="191.50">simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_ite..</text></g><g><title>simple`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (34 samples, 4.49%)</title><rect x="94.9802%" y="165" width="4.4914%" height="15" fill="rgb(223,113,26)" fg:x="719" fg:w="34"/><text x="95.2302%" y="175.50">simpl..</text></g><g><title>simple`alloc::raw_vec::finish_grow (33 samples, 4.36%)</title><rect x="95.1123%" y="149" width="4.3593%" height="15" fill="rgb(206,192,2)" fg:x="720" fg:w="33"/><text x="95.3623%" y="159.50">simpl..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (3 samples, 0.40%)</title><rect x="99.0753%" y="133" width="0.3963%" height="15" fill="rgb(241,108,4)" fg:x="750" fg:w="3"/><text x="99.3253%" y="143.50"></text></g><g><title>simple`std::sys::backtrace::__rust_begin_short_backtrace (316 samples, 41.74%)</title><rect x="57.8600%" y="229" width="41.7437%" height="15" fill="rgb(247,173,49)" fg:x="438" fg:w="316"/><text x="58.1100%" y="239.50">simple`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (316 samples, 41.74%)</title><rect x="57.8600%" y="213" width="41.7437%" height="15" fill="rgb(224,114,35)" fg:x="438" fg:w="316"/><text x="58.1100%" y="223.50">simple`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIt..</text></g><g><title>simple`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (316 samples, 41.74%)</title><rect x="57.8600%" y="197" width="41.7437%" height="15" fill="rgb(245,159,27)" fg:x="438" fg:w="316"/><text x="58.1100%" y="207.50">simple`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::i..</text></g><g><title>simple`&lt;image::image::Pixels&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.13%)</title><rect x="99.4716%" y="181" width="0.1321%" height="15" fill="rgb(245,172,44)" fg:x="753" fg:w="1"/><text x="99.7216%" y="191.50"></text></g><g><title>simple`core::ops::function::FnOnce::call_once{{vtable.shim}} (318 samples, 42.01%)</title><rect x="57.7279%" y="245" width="42.0079%" height="15" fill="rgb(236,23,11)" fg:x="437" fg:w="318"/><text x="57.9779%" y="255.50">simple`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>simple`std::thread::set_current (1 samples, 0.13%)</title><rect x="99.6037%" y="229" width="0.1321%" height="15" fill="rgb(205,117,38)" fg:x="754" fg:w="1"/><text x="99.8537%" y="239.50"></text></g><g><title>simple`std::sys::thread_local::destructors::list::register (1 samples, 0.13%)</title><rect x="99.6037%" y="213" width="0.1321%" height="15" fill="rgb(237,72,25)" fg:x="754" fg:w="1"/><text x="99.8537%" y="223.50"></text></g><g><title>dyld`dyld4::RuntimeState::addTLVTerminationFunc(void (*) (1 samples, 0.13%)</title><rect x="99.6037%" y="197" width="0.1321%" height="15" fill="rgb(244,70,9)" fg:x="754" fg:w="1"/><text x="99.8537%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.13%)</title><rect x="99.6037%" y="181" width="0.1321%" height="15" fill="rgb(217,125,39)" fg:x="754" fg:w="1"/><text x="99.8537%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.13%)</title><rect x="99.7358%" y="229" width="0.1321%" height="15" fill="rgb(235,36,10)" fg:x="755" fg:w="1"/><text x="99.9858%" y="239.50"></text></g><g><title>dyld`dyld4::RuntimeState::_instantiateTLVs (1 samples, 0.13%)</title><rect x="99.7358%" y="213" width="0.1321%" height="15" fill="rgb(251,123,47)" fg:x="755" fg:w="1"/><text x="99.9858%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.13%)</title><rect x="99.7358%" y="197" width="0.1321%" height="15" fill="rgb(221,13,13)" fg:x="755" fg:w="1"/><text x="99.9858%" y="207.50"></text></g><g><title>all (757 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="757"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (326 samples, 43.06%)</title><rect x="56.9353%" y="293" width="43.0647%" height="15" fill="rgb(211,50,8)" fg:x="431" fg:w="326"/><text x="57.1853%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (322 samples, 42.54%)</title><rect x="57.4637%" y="277" width="42.5363%" height="15" fill="rgb(245,182,24)" fg:x="435" fg:w="322"/><text x="57.7137%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>simple`std::sys::pal::unix::thread::Thread::new::thread_start (320 samples, 42.27%)</title><rect x="57.7279%" y="261" width="42.2721%" height="15" fill="rgb(242,14,37)" fg:x="437" fg:w="320"/><text x="57.9779%" y="271.50">simple`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>simple`std::sys::pal::unix::stack_overflow::imp::make_handler (2 samples, 0.26%)</title><rect x="99.7358%" y="245" width="0.2642%" height="15" fill="rgb(246,228,12)" fg:x="755" fg:w="2"/><text x="99.9858%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (1 samples, 0.13%)</title><rect x="99.8679%" y="229" width="0.1321%" height="15" fill="rgb(213,55,15)" fg:x="756" fg:w="1"/><text x="100.1179%" y="239.50"></text></g></svg></svg>